name: NetAppDocs Organization CI

on: [push, pull_request, workflow_dispatch]

env:
  DEPLOY_VERSION: v3
  FRAMEWORK_BRANCH: main
  INTERNAL_FLAG: ${{ endsWith(github.event.repository.name, '-internal') }}
  ES_API: ${{ endsWith(github.event.repository.name, '-internal') &&  secrets.ES_API_INTERNAL || secrets.ES_API }}
  ES_AUTH: ${{ endsWith(github.event.repository.name, '-internal') &&  secrets.ES_AUTH_INTERNAL || secrets.ES_AUTH }}
  ES_AUTH_WEB: ${{ endsWith(github.event.repository.name, '-internal') &&  secrets.ES_AUTH_INTERNAL_WEB || secrets.ES_AUTH_WEB }}
  DEPLOY_KEY_PREVIEW: ${{ secrets.DEPLOY_KEY_PREVIEW }}
  DEPLOY_HOST_PREVIEW: ${{ secrets.DEPLOY_HOST_PREVIEW }}
  GH_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  GH_DEPLOY: ${{ secrets.GH_DEPLOY }}
  MT_CLIENT: ${{ secrets.MT_CLIENT }}
  MT_SECRET: ${{ secrets.MT_SECRET }}
  MT_USER: ${{ secrets.MT_USER }}
  MT_PSWD: ${{ secrets.MT_PSWD }}
  MAESTRO_USERNAME: ${{ secrets.MAESTRO_USERNAME }}
  MAESTRO_PASSWORD: ${{ secrets.MAESTRO_PASSWORD }}


jobs:
  build:
    if: ${{(github.ref == 'refs/heads/main') || (github.event.pull_request.base.ref == 'main') || endsWith(github.event.repository.name, '-internal') }}
    runs-on: ${{ endsWith(github.event.repository.name, '-internal') && 'netappdocs-runner'  || 'ubuntu-20.04' }}
    steps:

      - name: "Framework Checkout"
        uses: actions/checkout@v2
        with:
          repository: 'NetAppDocOps/jekyll'
          token: ${{ env.GH_TOKEN }}
          path: dependencies/jekyll
          ref: ${{ env.FRAMEWORK_BRANCH }}
             
      - name: "Configure"
        uses: ./dependencies/jekyll/.ci/actions/configure
        
      - name: "Install"
        uses: ./dependencies/jekyll/.ci/actions/install
        
      - name: "Lipi Adoc syntax check"
        if: ${{ env.LIPI_ENABLED == 'true' }}
        uses: ./dependencies/jekyll/.ci/actions/lipi-adoc

      - name: "Generate HTML"
        uses: ./dependencies/jekyll/.ci/actions/jekyll

      - name: "Generate PDF"
        uses: ./dependencies/jekyll/.ci/actions/jekyll-pdf
        
      - name: "Lipi Doc site check"
        if: ${{ env.LIPI_ENABLED == 'true' }}
        uses: ./dependencies/jekyll/.ci/actions/lipi-doc

      - name: "Deploy"
        if: ${{ env.DEPLOY_ENABLED == 'true' }}
        uses: ./dependencies/jekyll/.ci/actions/deploy
        
      - name: "Translate"
        if: ${{ env.HARMONY_ENABLED == 'true' }}
        uses: ./dependencies/jekyll/.ci/actions/translate
        
      - name: "Lipi Report"
        if: ${{ always() && env.LIPI_ENABLED == 'true' }}
        uses: ./dependencies/jekyll/.ci/actions/lipi-report

      - name: "Post processing actions"
        if: ${{ always() }}
        uses: ./dependencies/jekyll/.ci/actions/post-processing

      - name: Cleaning up workspace path
        if: always()
        run: |
          echo "Cleaning up previous run"
          rm -rf "${{ github.workspace }}/*"
